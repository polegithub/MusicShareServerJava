<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
  xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
  http://www.springframework.org/schema/jdbc 
  http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
  http://www.springframework.org/schema/cache 
  http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd 
  http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
  <context:property-placeholder location="classpath*:/.conf/application.properties" />
  <context:component-scan base-package="eric.clapton.musician.service">
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
  </context:component-scan>
  <aop:aspectj-autoproxy expose-proxy="true" />
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="eric.clapton.infrastructure.data.jpa.repository.RepositoryHelper.setEntityManagerFactory" />
    <property name="arguments" ref="entityManagerFactory" />
  </bean>
  <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="eric.clapton.infrastructure.data.jpa.search.SearchableConvertUtils.setConversionService" />
    <property name="arguments" ref="conversionService" />
  </bean>
  <bean id="musicianDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <property name="driverClass" value="${musician.dataSource.driverClass}" />
    <property name="jdbcUrl" value="${musician.dataSource.jdbcUrl}" />
    <property name="user" value="${musician.dataSource.user}" />
    <property name="password" value="${musician.dataSource.password}" />
    <property name="initialPoolSize" value="${musician.dataSource.initialPoolSize}" />
    <property name="minPoolSize" value="${musician.dataSource.minPoolSize}" />
    <property name="maxPoolSize" value="${musician.dataSource.maxPoolSize}" />
    <property name="maxIdleTime" value="${musician.dataSource.maxIdleTime}" />
    <property name="acquireIncrement" value="${musician.dataSource.acquireIncrement}" />
    <property name="checkoutTimeout" value="${musician.dataSource.checkoutTimeout}" />
    <property name="maxIdleTimeExcessConnections" value="${musician.dataSource.maxIdleTimeExcessConnections}" />
  </bean>
  <bean id="musicianDataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
    <property name="targetDataSource" ref="musicianDataSource" />
  </bean>
  <!-- 暴露 JDBC 模版，在 JPA 无力处理时使用 JDBC 执行程序 -->
  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="musicianDataSourceProxy" />
  </bean>
  <!-- 实体管理器 -->
  <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="dataSource">
      <bean class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="musicianDataSourceProxy" />
      </bean>
    </property>
    <property name="packagesToScan" value="eric.clapton.musician.core.entity.po" />
    <property name="jpaVendorAdapter">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="generateDdl" value="${jpa.generateDdl}" />
        <property name="database" value="${jpa.database}" />
        <property name="databasePlatform" value="${jpa.databasePlatform}" />
        <property name="showSql" value="${jpa.showSql}" />
      </bean>
    </property>
    <property name="persistenceProvider">
      <bean class="org.hibernate.ejb.HibernatePersistence" />
    </property>
    <property name="jpaDialect">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
    </property>
    <property name="jpaPropertyMap">
      <map>
        <entry key="javax.persistence.sharedCache.mode" value="ENABLE_SELECTIVE" />
        <!-- 是否格式化输出的sql -->
        <entry key="hibernate.format_sql" value="true" />
        <!-- 使用自定义的validator进行jsr303验证 <entry key="javax.persistence.validation.factory" value-ref="validator" /> -->
        <!-- jsr303验证模式 因为其要么验证 要么不验证 不能按照规则走 所以此处禁用 -->
        <!-- #http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/configuration.html -->
        <entry key="javax.persistence.validation.mode" value="NONE" />
        <!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
        <entry key="hibernate.archive.autodetection" value="class" />
        <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}" />
        <!-- 检查@NamedQuery -->
        <entry key="hibernate.query.startup_check" value="${hibernate.query.startup_check}" />
        <entry key="hibernate.memcached.servers" value="${hibernate.memcached.servers}" />
        <entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}" />
        <entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}" />
        <entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}" />
        <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}" />
        <entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}" />
        <entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}" />
        <entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}" />
        <!--二级缓存配置 -->
        <entry key="hibernate.cache.provider_class" value="${hibernate.cache.provider_class}" />
        <!-- <entry key="hibernate.memcached.memcacheClientFactory" value="${hibernate.memcached.memcacheClientFactory}" 
          /> -->
        <entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}" />
      </map>
    </property>
  </bean>
  <!--事务管理器配置 -->
  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory" />
  </bean>
  <!-- 扩展的 Spring Data JPA 数据仓库 -->
  <jpa:repositories base-package="eric.clapton.musician.**.repository" repository-impl-postfix="Impl"
    factory-class="eric.clapton.infrastructure.data.jpa.repository.support.SimpleBaseRepositoryFactoryBean"
    entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager">
  </jpa:repositories>
  <!-- 启用事务 -->
  <tx:annotation-driven transaction-manager="transactionManager" />
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
      <tx:method name="get*" read-only="true" propagation="REQUIRED" />
      <tx:method name="find*" read-only="true" propagation="REQUIRED" />
      <tx:method name="list*" read-only="true" propagation="REQUIRED" />
      <tx:method name="query*" read-only="true" propagation="REQUIRED" />
      <tx:method name="is*" read-only="true" propagation="REQUIRED" />
      <tx:method name="count*" read-only="true" propagation="REQUIRED" />
      <tx:method name="assign*" propagation="REQUIRED" />
      <tx:method name="create*" propagation="REQUIRED" />
      <tx:method name="send*" propagation="REQUIRED" />
      <tx:method name="add*" propagation="REQUIRED" />
      <tx:method name="save*" propagation="REQUIRED" />
      <tx:method name="insert*" propagation="REQUIRED" />
      <tx:method name="del*" propagation="REQUIRED" />
      <tx:method name="update*" propagation="REQUIRED" />
      <tx:method name="modify*" propagation="REQUIRED" />
      <tx:method name="edit*" propagation="REQUIRED" />
      <tx:method name="exe*" propagation="REQUIRED" />
      <tx:method name="import*" propagation="REQUIRED" />
      <tx:method name="stop*" propagation="REQUIRED" />
      <tx:method name="confirm*" propagation="REQUIRED" />
      <tx:method name="invalid*" propagation="REQUIRED" />
      <tx:method name="commit*" propagation="REQUIRED" />
      <tx:method name="do*" propagation="REQUIRED" />
      <tx:method name="delete*" propagation="REQUIRED" />
      <tx:method name="*" read-only="true" />
    </tx:attributes>
  </tx:advice>
  <aop:config proxy-target-class="true">
    <aop:advisor pointcut="execution(* eric.clapton.musician.service..*.impl..*(..))" advice-ref="txAdvice" />
<!--     <aop:advisor pointcut="execution(* eric.clapton.musician.program..*..*(..))" advice-ref="txAdvice" /> -->
    <!-- <aop:advisor pointcut="execution(* eric.clapton.musician.service..*.impl..*(..))" advice-ref="txAdvice" /> -->
  </aop:config>
</beans>