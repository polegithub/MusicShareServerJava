<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<description>Spring公共配置 </description>
	<context:property-placeholder location="classpath:.conf/prop/application.properties" />
	<!-- 扫描注解Bean -->
	<context:component-scan base-package="cn.roomy.ic">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
    <!-- 
    <!-- ActiveMQ 的连接配置 -->
    <bean id="activemqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
      <property name="brokerURL" value="${jms.broker_url}"></property>
    </bean>
    <!-- JMS 连接工厂 -->
    <bean id="jmsConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
      <property name="targetConnectionFactory" ref="activemqConnectionFactory" />  
    </bean>
    <!-- 订阅/发布模式下的 JMS 目的地。 -->
    <bean id="jmsTopicDestination" class="org.apache.activemq.command.ActiveMQTopic">  
      <constructor-arg value="ActiveMQ.Advisory.Consumer.Queue.Product"/>  
    </bean>
    <!-- JMS 模板 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
      <property name="connectionFactory" ref="jmsConnectionFactory" />
      <property name="defaultDestination" ref="jmsTopicDestination" />
    </bean>
    <bean id="configUtils" class="cn.roomy.ic.utils.ConfigUtils">
      <constructor-arg value="classpath:.conf/config-def.xml" />
    </bean>
    -->
    <!-- 定义 JMS消息接收器的 bean -->
    <!-- <bean id="jmsTestMessageListener" class="cn.roomy.purchase.test.jms.JMSTestMessageListener"/> 
    <bean id="jmsMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="activemqConnectionFactory" />  
        <property name="destination" ref="jmsTopicDestination" />  
        <property name="messageListener" ref="jmsTestMessageListener" />  
    </bean>  -->
    
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="${pool.initialPoolSize}" />
		<property name="minPoolSize" value="${pool.minPoolSize}" />
		<property name="maxPoolSize" value="${pool.maxPoolSize}" />
		<property name="maxIdleTime" value="${pool.maxIdleTime}" />
		<property name="acquireIncrement" value="${pool.acquireIncrement}" />
		<property name="checkoutTimeout" value="${pool.checkoutTimeout}" />
		<property name="maxIdleTimeExcessConnections" value="${pool.maxIdleTimeExcessConnections}" />
	</bean>

	<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<property name="targetDataSource" ref="dataSource" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSourceProxy" />
	</bean>

	<!-- jpa Entity Factory 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSourceProxy" />
		<property name="packagesToScan" value="cn.roomy.ic.entity" />

		<property name="persistenceUnitName" value="${jpa.persistenceUnitName}" />
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="${jpa.generateDdl}" />
				<property name="database" value="${jpa.database}" />
				<property name="databasePlatform" value="${jpa.databasePlatform}" />
				<property name="showSql" value="${jpa.showSql}" />
			</bean>
		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		<property name="jpaPropertyMap">
			<map>
                <entry key="javax.persistence.sharedCache.mode" value="ENABLE_SELECTIVE" /> 
				<!-- 是否格式化输出的sql -->
				<entry key="hibernate.format_sql" value="true" />
				<!-- 使用自定义的validator进行jsr303验证 -->
				<entry key="javax.persistence.validation.factory" value-ref="validator" />
				<!-- jsr303验证模式 因为其要么验证 要么不验证 不能按照规则走 所以此处禁用 -->
				<!-- #http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/configuration.html -->
				<entry key="javax.persistence.validation.mode" value="NONE" />

				<!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
				<entry key="hibernate.archive.autodetection" value="class" />
				<!-- 检查@NamedQuery -->
				<entry key="hibernate.query.startup_check" value="true" />
                <entry key="hibernate.memcached.servers" value="localhost:11211" />
				<entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}" />
				<entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}" />
				<entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}" />
				<entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}" />
				<entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}" />
				<entry key="hibernate.cache.use_second_level_cache" value="true" />
				<entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}" />
				<!--二级缓存配置 -->
				<entry key="hibernate.cache.provider_class" value="${hibernate.cache.provider_class}" />
				<!-- <entry key="hibernate.memcached.memcacheClientFactory" value="${hibernate.memcached.memcacheClientFactory}" /> -->
				<entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}" />
			</map>
		</property>
	</bean>
	
	<!--事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<jpa:repositories base-package="cn.roomy.**.repository" repository-impl-postfix="Impl"
		factory-class="cn.roomy.ic.jpa.repository.support.SimpleBaseRepositoryFactoryBean" entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager">
	</jpa:repositories>

	<tx:annotation-driven transaction-manager="transactionManager" />



	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
			<tx:method name="get*" read-only="true" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" propagation="REQUIRED" />
			<tx:method name="list*" read-only="true" propagation="REQUIRED" />
			<tx:method name="query*" read-only="true" propagation="REQUIRED" />
			<tx:method name="is*" read-only="true" propagation="REQUIRED" />
			<tx:method name="count*" read-only="true" propagation="REQUIRED" />
			<tx:method name="assign*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="send*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="exe*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<tx:method name="stop*" propagation="REQUIRED" />
			<tx:method name="confirm*" propagation="REQUIRED" />
			<tx:method name="invalid*" propagation="REQUIRED" />
			<tx:method name="commit*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(*  cn.roomy..*.service..*.impl..*(..))" advice-ref="txAdvice" />
	</aop:config>

	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
				<value>classpath:messages</value>
				<value>classpath:ValidationMessages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>

	<!-- 类型转换及数据格式化 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />

	<!--设置查询字符串转换器的conversion service -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="cn.roomy.ic.jpa.entity.search.util.SearchableConvertUtils.setConversionService" />
		<property name="arguments" ref="conversionService" />
	</bean>

	<!--设置BaseRepositoryImplHelper辅助类所需的entityManagerFactory -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="cn.roomy.ic.jpa.repository.RepositoryHelper.setEntityManagerFactory" />
		<property name="arguments" ref="entityManagerFactory" />
	</bean>
	<bean class="cn.roomy.ic.utils.SpringUtils" />
</beans>